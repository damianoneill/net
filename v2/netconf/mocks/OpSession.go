// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	common "github.com/damianoneill/net/v2/netconf/common"
	mock "github.com/stretchr/testify/mock"
)

// OpSession is an autogenerated mock type for the OpSession type
type OpSession struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *OpSession) Close() {
	_m.Called()
}

// Execute provides a mock function with given fields: req
func (_m *OpSession) Execute(req common.Request) (*common.RPCReply, error) {
	ret := _m.Called(req)

	var r0 *common.RPCReply
	if rf, ok := ret.Get(0).(func(common.Request) *common.RPCReply); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.RPCReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Request) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteAsync provides a mock function with given fields: req, rchan
func (_m *OpSession) ExecuteAsync(req common.Request, rchan chan *common.RPCReply) error {
	ret := _m.Called(req, rchan)

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Request, chan *common.RPCReply) error); ok {
		r0 = rf(req, rchan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ID provides a mock function with given fields:
func (_m *OpSession) ID() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// ServerCapabilities provides a mock function with given fields:
func (_m *OpSession) ServerCapabilities() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Subscribe provides a mock function with given fields: req, nchan
func (_m *OpSession) Subscribe(req common.Request, nchan chan *common.Notification) (*common.RPCReply, error) {
	ret := _m.Called(req, nchan)

	var r0 *common.RPCReply
	if rf, ok := ret.Get(0).(func(common.Request, chan *common.Notification) *common.RPCReply); ok {
		r0 = rf(req, nchan)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.RPCReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Request, chan *common.Notification) error); ok {
		r1 = rf(req, nchan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
