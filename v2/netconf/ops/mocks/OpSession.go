// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	common "github.com/damianoneill/net/v2/netconf/common"
	mock "github.com/stretchr/testify/mock"

	ops "github.com/damianoneill/net/v2/netconf/ops"
)

// OpSession is an autogenerated mock type for the OpSession type
type OpSession struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *OpSession) Close() {
	_m.Called()
}

// CloseSession provides a mock function with given fields:
func (_m *OpSession) CloseSession() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CopyConfig provides a mock function with given fields: source, target
func (_m *OpSession) CopyConfig(source ops.CfgDsOpt, target ops.CfgDsOpt) error {
	ret := _m.Called(source, target)

	var r0 error
	if rf, ok := ret.Get(0).(func(ops.CfgDsOpt, ops.CfgDsOpt) error); ok {
		r0 = rf(source, target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteConfig provides a mock function with given fields: target
func (_m *OpSession) DeleteConfig(target ops.CfgDsOpt) error {
	ret := _m.Called(target)

	var r0 error
	if rf, ok := ret.Get(0).(func(ops.CfgDsOpt) error); ok {
		r0 = rf(target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Discard provides a mock function with given fields:
func (_m *OpSession) Discard() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditConfig provides a mock function with given fields: target, config, options
func (_m *OpSession) EditConfig(target string, config ops.ConfigOption, options ...ops.EditOption) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, target, config)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ops.ConfigOption, ...ops.EditOption) error); ok {
		r0 = rf(target, config, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditConfigCfg provides a mock function with given fields: target, config, options
func (_m *OpSession) EditConfigCfg(target string, config interface{}, options ...ops.EditOption) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, target, config)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, ...ops.EditOption) error); ok {
		r0 = rf(target, config, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Execute provides a mock function with given fields: req
func (_m *OpSession) Execute(req common.Request) (*common.RPCReply, error) {
	ret := _m.Called(req)

	var r0 *common.RPCReply
	if rf, ok := ret.Get(0).(func(common.Request) *common.RPCReply); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.RPCReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Request) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteAsync provides a mock function with given fields: req, rchan
func (_m *OpSession) ExecuteAsync(req common.Request, rchan chan *common.RPCReply) error {
	ret := _m.Called(req, rchan)

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Request, chan *common.RPCReply) error); ok {
		r0 = rf(req, rchan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetConfigSubtree provides a mock function with given fields: filter, source, result
func (_m *OpSession) GetConfigSubtree(filter interface{}, source string, result interface{}) error {
	ret := _m.Called(filter, source, result)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, interface{}) error); ok {
		r0 = rf(filter, source, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetConfigXpath provides a mock function with given fields: xpath, nslist, source, result
func (_m *OpSession) GetConfigXpath(xpath string, nslist []ops.Namespace, source string, result interface{}) error {
	ret := _m.Called(xpath, nslist, source, result)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []ops.Namespace, string, interface{}) error); ok {
		r0 = rf(xpath, nslist, source, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSchema provides a mock function with given fields: id, version, fmt
func (_m *OpSession) GetSchema(id string, version string, fmt string) (string, error) {
	ret := _m.Called(id, version, fmt)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(id, version, fmt)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(id, version, fmt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSchemas provides a mock function with given fields:
func (_m *OpSession) GetSchemas() ([]ops.Schema, error) {
	ret := _m.Called()

	var r0 []ops.Schema
	if rf, ok := ret.Get(0).(func() []ops.Schema); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ops.Schema)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubtree provides a mock function with given fields: filter, result
func (_m *OpSession) GetSubtree(filter interface{}, result interface{}) error {
	ret := _m.Called(filter, result)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}) error); ok {
		r0 = rf(filter, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetXpath provides a mock function with given fields: xpath, nslist, result
func (_m *OpSession) GetXpath(xpath string, nslist []ops.Namespace, result interface{}) error {
	ret := _m.Called(xpath, nslist, result)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []ops.Namespace, interface{}) error); ok {
		r0 = rf(xpath, nslist, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ID provides a mock function with given fields:
func (_m *OpSession) ID() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// KillSession provides a mock function with given fields: id
func (_m *OpSession) KillSession(id uint64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Lock provides a mock function with given fields: target
func (_m *OpSession) Lock(target string) error {
	ret := _m.Called(target)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServerCapabilities provides a mock function with given fields:
func (_m *OpSession) ServerCapabilities() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Subscribe provides a mock function with given fields: req, nchan
func (_m *OpSession) Subscribe(req common.Request, nchan chan *common.Notification) (*common.RPCReply, error) {
	ret := _m.Called(req, nchan)

	var r0 *common.RPCReply
	if rf, ok := ret.Get(0).(func(common.Request, chan *common.Notification) *common.RPCReply); ok {
		r0 = rf(req, nchan)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.RPCReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Request, chan *common.Notification) error); ok {
		r1 = rf(req, nchan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unlock provides a mock function with given fields: target
func (_m *OpSession) Unlock(target string) error {
	ret := _m.Called(target)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
